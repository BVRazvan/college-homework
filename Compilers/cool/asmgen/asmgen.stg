// Helper templates for sequence generation
sequence(e) ::= "<e; separator=\"\n\">"          // Basic sequence with newline separation
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"  // Sequence with extra spacing

// Main program structure
program(classNames, intLiterals, stringLiterals, boolLiterals, classObjProts, objProt, methodTable, initRoutines, functionsDef) ::= <<
    .data
    .align  2
    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  bool_const0
    .globl  bool_const1
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag
_int_tag:
    .word   2
_string_tag:
    .word   3
_bool_tag:
    .word   4

<stringLiterals>
<intLiterals>
<boolLiterals>
class_nameTab:
<classNames>

class_objTab:
<classObjProts>

<objProt>
<methodTable>
    .globl  heap_start
heap_start:
    .word   0
    .text
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main

Object_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra

<initRoutines>
<functionsDef>
>>

string_const(id, vals, str) ::= <<
str_const<id>:
<vals :{ item |     .word   <item><\n>}>    .asciiz "<str>"<\n>    .align   2<\n>
>>

int_const(id, vals) ::= <<
int_const<id>:
<vals :{ item |     .word   <item><\n>}>
>>

bool_const(id, vals) ::= <<
bool_const<id>:
<vals :{ item |     .word   <item><\n>}>
>>

class_const(id) ::= <<
    .word   <id>
>>

class_obj(id, keys, vals, e) ::= <<
<id>_protObj:
<keys, vals :{ key, value |     <key> <value><\n>}><e><\n>
>>

class_meth(id, vals) ::= <<
<id>_dispTab:
<vals :{ value |    .word   <value><\n>}>
>>

class_init(id, parent, e) ::= <<
<id>_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     <parent>_init
<e>

    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra<\n>
>>

function_text(classId, methodId, text, space_params) ::= <<
<classId>.<methodId>:
	addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
<text>
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    addiu   $sp $sp <space_params>
    jr      $ra
>>

literal(id) ::= <<
    la      $a0 <id>
>>

attribute(offset, reg) ::= <<
    lw      $a0 <offset>($<reg>)
>>

self() ::= <<
    move     $a0 $s0
>>

word_extension(id) ::= <<
    .word   <id><\n>
>>

assign(e, offset, reg) ::= <<
<e>
    sw      $a0 <offset>($<reg>)

>>

function_call(e, cnt, line, offset, params, includeMove) ::= <<
<params :{ value |  <value>
    sw      $a0 0($sp)
    addiu   $sp $sp -4<\n>}>
<e>
<if(includeMove)>
    move    $a0 $s0
<endif>
    bnez    $a0 dispatch<cnt>
    la      $a0 str_const0
    li      $t1 <line>
    jal     _dispatch_abort
dispatch<cnt>:
    lw      $t1 8($a0)
    lw      $t1 <offset>($t1)
    jalr    $t1
>>

function_call_attr(reg, params, e, cnt, line, offset, offset_method) ::= <<
<params :{ value |  <value>
    sw      $a0 0($sp)
    addiu   $sp $sp - 4<\n>}>
<e>
    bnez    $a0 dispatch<cnt>
    la      $a0 str_const0
    li      $t1 <line>
    jal     _dispatch_abort
dispatch<cnt>:
    lw      $t1 8($a0)   # dispatch table
    lw      $t1 <offset_method>($t1)   # method offset
    jalr    $t1
>>

function_call_dispatch(id, e, cnt, line, offset, params) ::= <<
<params :{ value |  <value>
    sw      $a0 0($sp)
    addiu   $sp $sp -4<\n>}>
<e>
    bnez    $a0 dispatch<cnt>
    la      $a0 str_const0
    li      $t1 <line>
    jal     _dispatch_abort
dispatch<cnt>:
    la      $t1 <id>_dispTab
    lw      $t1 <offset>($t1)
    jalr    $t1
>>

function_call_trick(e, cnt, line, offset, params) ::= <<
<params :{ value |  <value>
    sw      $a0 0($sp)
    addiu   $sp $sp -4<\n>}>
<e>
    bnez    $a0 dispatch<cnt>
    la      $a0 str_const0
    li      $t1 <line>
    jal     _dispatch_abort
dispatch<cnt>:
    lw      $t1 8($a0)
    lw      $t1 <offset>($t1)
    jalr    $t1
>>

block(vals) ::= <<
<vals :{ value |    <value><\n>}>
>>

formal(offset, reg) ::= <<
    lw      $a0 <offset>($<reg>)
>>

let(params, offset_sub, offset_add, body, idxs) ::= <<
    addiu   $sp $sp <offset_sub>
<params, idxs :{ value, idx |
<value>
    sw      $a0 <idx>($fp)<\n>}>
<body>
    addiu   $sp $sp <offset_add>
>>

pointer(id) ::= <<
    <id>
>>

new(id) ::= <<
    la      $a0 <id>_protObj
    jal     Object.copy
    jal     <id>_init
>>

self_type() ::= <<
    la      $t1 class_objTab
    lw      $t2 0($s0)          # class tag
    sll     $t2 $t2 3           # *8
    addu    $t1 $t1 $t2         # class_objTab + 8 * tag
    sw      $t1 0($sp)
    addiu   $sp $sp -4

    lw      $a0 0($t1)          # _protObj
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 4($t1)          # _init
    jalr    $t1
>>

if(condPath, thenPath, elsePath, end_counter, else_counter) ::= <<
<condPath>
    lw      $t1 12($a0)
    beqz    $t1 else<else_counter>
<thenPath>
    b       endif<end_counter>
else<else_counter>:
<elsePath>
endif<end_counter>:
>>

isvoid(e, isvoid_counter) ::= <<
<e>
    move    $t1 $a0
    la      $a0 bool_const1
    beqz    $t1 isvoid<isvoid_counter>
    la      $a0 bool_const0
isvoid<isvoid_counter>:
>>

not(e, not_counter) ::= <<
<e>
    lw      $t1 12($a0)
    la      $a0 bool_const1
    beqz    $t1 not<not_counter>
    la      $a0 bool_const0
not<not_counter>:
>>

arithmetic(op, e1, e2) ::= <<
<e1>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<e2>
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)
    lw      $t2 12($a0)
    <op>    $t1 $t1 $t2
    sw      $t1 12($a0)
>>

neg(e) ::= <<
<e>
    jal     Object.copy
    lw      $t1 12($a0)
    neg     $t1 $t1
    sw      $t1 12($a0)
>>

equals(e1, e2, eq_counter, op) ::= <<
<e1>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    move    $t2 $a0
    la      $a0 bool_const1
    <op>     $t1 $t2 eq<eq_counter>
    la      $a1 bool_const0
    jal     equality_test
eq<eq_counter>:

>>

relational(op, e1, e2, compare_counter) ::= <<
<e1>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)
    lw      $t2 12($a0)
    la      $a0 bool_const1
    <op>    $t1 $t2 compare_<compare_counter>
    la      $a0 bool_const0
compare_<compare_counter>:
>>

while(cond, body, while_counter, end_counter) ::= <<
while<while_counter>:
<cond>
    lw      $t1 12($a0)
    beqz    $t1 endwhile<end_counter>
<body>
    b       while<while_counter>
endwhile<end_counter>:
    move    $a0 $zero
>>

case(endcase_counter, case_counter_next, prev_case_counters, e, ids, exprs, case_counters, line, lows, ups, last_case_counter, case_counter_init, low_init, up_init, id_init, expr_init) ::= <<
    addiu   $sp $sp -4
<e>
    bnez    $a0 case<case_counter_init>
    la      $a0 str_const0
    li      $t1 <line>
    jal     _case_abort2
case<case_counter_init>:
    sw      $a0 -4($fp)
    lw      $t1 0($a0)
    blt     $t1 <low_init> casebranch<case_counter_next>
    bgt     $t1 <up_init> casebranch<case_counter_next>
<expr_init>
    b       endcase<endcase_counter>
<ids, exprs, lows, ups, case_counters, prev_case_counters :{ id, expr, low, up, case_counter, prev_case_counter |
casebranch<prev_case_counter>:
    blt     $t1 <low> casebranch<case_counter>
    bgt     $t1 <up> casebranch<case_counter>
<expr>
    b       endcase<endcase_counter>
}>
casebranch<last_case_counter>:
    lw      $a0 -4($fp)
    jal     _case_abort
endcase<endcase_counter>:
    addiu   $sp $sp 4
>>

move_null() ::= <<
    move    $a0 $zero
>>

