function [V_out W_out] = lanczos_nonsymmetric(A, V_in, W_in, m, n, p)
  delta = zeros(n, n, m);
  beta = zeros(n, n, m);
  V_out = zeros(n, n, m);
  W_out = zeros(n, n, m);
  W_tilda = zeros(n, n, m + 2);
  V_tilda = zeros(n, n, m + 2);
  [delta(:, :, 1) beta(:, :, 1)] = qr(W_in' * V_in);
  V_out(:, :, 1) = V_in * lanczos_inverse(beta(:, :, 1));
  W_out(:, :, 1) = W_in * delta(:, :, 1);
  V_tilda(:, :, 2) = A * V_out(:, :, 1);
  W_tilda(:, :, 2) = A' * W_out(:, :, 1);
  for j = 1 : m
    alpha(:, :, j) = W_out(:, :, j)' * V_tilda(:, :, j + 1);
    V_tilda(:, :, j + 1) = V_tilda(:, :, j + 1) - V_out(:, :, j) * alpha(:, :, j);
    W_tilda(:, :, j + 1) = W_tilda(:, :, j + 1) - W_out(:, :, j) * alpha(:, :, j)';
    [V_out(:, :, j + 1) beta(:, :, j + 1)] = qr(V_tilda(:, :, j + 1));
    [W_out(:, :, j + 1) new] = qr(W_tilda(:, :, j + 1));
    delta(:, :, j + 1) = new';
    [U(:, :, j) sigma(:, :, j) Z(:, :, j)] = svd(W_out(:, :, j + 1)' * V_out(:, :, j + 1));
    Z(:, :, j) = Z(:, :, j)';
    delta(:, :, j + 1) = delta(:, :, j + 1) * U(:, :, j) * sigma(:, :, j)^(1/2);
    beta(:, :, j + 1) = sigma(:, :, j)^(1/2) * Z(:, :, j) * beta(:, :, j + 1);
    V_out(:, :, j + 1) = V_out(:, :, j + 1) * Z(:, :, j) * sigma(:, :, j)^(1/2);
    W_out(:, :, j + 1) =  W_out(:, :, j + 1) * U(j) * sigma(:, :, j)^(-1/2);
    V_tilda(:, :, j + 2) = A * V_out(:, :, j + 1) - V_out(:, :, j) * delta(:, :, j + 1);
    W_tilda(:, :, j + 2) = A' * W_out(:, :, j + 1) - W_out(:, :, j) * beta(:, :, j + 1)';
  endfor
endfunction
