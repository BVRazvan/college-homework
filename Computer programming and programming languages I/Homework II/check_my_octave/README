// Copyright Valentin-Razvan Bogdan 311CA <bogdanvrazvan@gmail.com>

	First of all, i read commands till i get "Q". Regarding commands,
I solved all of them inside the vector of matrices. Therefore, when it came to
modifying a a matrix, I introduced a new one in vector and "shaped" it as the
command required and then I copied it at desired position. Of course, i always
had in mind to allocate and free memory when doing any tiny change. I think
that it would have been much easier to create a random matrix(not in vector)
and  then let the matrix in vector to point at it, but this is another
discussion :). I think that there not much to say, all operations are
straightforward(excluding bonus) and code comments i wrote describe step by
step what i did.
	I had a tough time trying to understand how Strassen's algorithm works
and I still think that life's too short to replace usual matrix multiplication
with it. Long story short, this is a recursive algorithm which divides a matrix
into 4 parts. With these "pieces", there are created 7 auxiliar matrices(using
addition, substraction and multiplication between them). Now, we can create
the product matrix using addition and substraction on these 7 matrices.
Being a recursive algorithm, when it comes to multiplying combinations of those
4 "pieces" of initial matrix we apply Strassen's algorithm once again.
Of course, base case is met when we have to multiply 2 matrices of 1x1.
In the end, we acommplish matrix multiplication in O(n^(log2(7)), comparing to
naive implementation of O(n^3).
